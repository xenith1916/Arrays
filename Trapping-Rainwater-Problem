
/* Given an array arr[] of N non-negative integers representing height of blocks at index i as Ai where the width of each block is 1. 
Compute how much water can be trapped in between blocks after raining.*/

//Time complexity----o(n)
//Auxiliary Space----o(1)


#include<bits/stdc++.h>
using namespace std;

int trapping(int arr[],int n){
int result=0;
int left=0,right=0,lo=0,hi=n-1;
while(lo<=hi){
    if(arr[lo]<arr[hi]){
        if(arr[lo]>left)
            left=arr[lo];
        else
            result=result+left-arr[lo];
        lo++;
    }
    else{
        if(arr[hi]>right)
            right=arr[hi];
        else
            result=result+right-arr[hi];
        hi--;
    }
}
return result;
}

int main(){
int arr[]={ 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1,3,2,1};
int n=sizeof(arr)/sizeof(arr[0]);
cout<<trapping(arr,n);


}
